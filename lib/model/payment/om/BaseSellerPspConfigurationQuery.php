<?php


/**
 * Base class that represents a query for the 'seller_psp_configuration' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Sat Aug 25 00:34:26 2012
 *
 * @method     SellerPspConfigurationQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     SellerPspConfigurationQuery orderBySellerId($order = Criteria::ASC) Order by the seller_id column
 * @method     SellerPspConfigurationQuery orderByPspName($order = Criteria::ASC) Order by the psp_name column
 * @method     SellerPspConfigurationQuery orderByServiceType($order = Criteria::ASC) Order by the service_type column
 * @method     SellerPspConfigurationQuery orderByPspConfiguration($order = Criteria::ASC) Order by the psp_configuration column
 * @method     SellerPspConfigurationQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     SellerPspConfigurationQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     SellerPspConfigurationQuery groupById() Group by the id column
 * @method     SellerPspConfigurationQuery groupBySellerId() Group by the seller_id column
 * @method     SellerPspConfigurationQuery groupByPspName() Group by the psp_name column
 * @method     SellerPspConfigurationQuery groupByServiceType() Group by the service_type column
 * @method     SellerPspConfigurationQuery groupByPspConfiguration() Group by the psp_configuration column
 * @method     SellerPspConfigurationQuery groupByCreatedAt() Group by the created_at column
 * @method     SellerPspConfigurationQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     SellerPspConfigurationQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     SellerPspConfigurationQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     SellerPspConfigurationQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     SellerPspConfigurationQuery leftJoinSeller($relationAlias = null) Adds a LEFT JOIN clause to the query using the Seller relation
 * @method     SellerPspConfigurationQuery rightJoinSeller($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Seller relation
 * @method     SellerPspConfigurationQuery innerJoinSeller($relationAlias = null) Adds a INNER JOIN clause to the query using the Seller relation
 *
 * @method     SellerPspConfigurationQuery leftJoinOrder($relationAlias = null) Adds a LEFT JOIN clause to the query using the Order relation
 * @method     SellerPspConfigurationQuery rightJoinOrder($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Order relation
 * @method     SellerPspConfigurationQuery innerJoinOrder($relationAlias = null) Adds a INNER JOIN clause to the query using the Order relation
 *
 * @method     SellerPspConfigurationQuery leftJoinTemplate($relationAlias = null) Adds a LEFT JOIN clause to the query using the Template relation
 * @method     SellerPspConfigurationQuery rightJoinTemplate($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Template relation
 * @method     SellerPspConfigurationQuery innerJoinTemplate($relationAlias = null) Adds a INNER JOIN clause to the query using the Template relation
 *
 * @method     SellerPspConfiguration findOne(PropelPDO $con = null) Return the first SellerPspConfiguration matching the query
 * @method     SellerPspConfiguration findOneOrCreate(PropelPDO $con = null) Return the first SellerPspConfiguration matching the query, or a new SellerPspConfiguration object populated from the query conditions when no match is found
 *
 * @method     SellerPspConfiguration findOneById(int $id) Return the first SellerPspConfiguration filtered by the id column
 * @method     SellerPspConfiguration findOneBySellerId(int $seller_id) Return the first SellerPspConfiguration filtered by the seller_id column
 * @method     SellerPspConfiguration findOneByPspName(string $psp_name) Return the first SellerPspConfiguration filtered by the psp_name column
 * @method     SellerPspConfiguration findOneByServiceType(string $service_type) Return the first SellerPspConfiguration filtered by the service_type column
 * @method     SellerPspConfiguration findOneByPspConfiguration( $psp_configuration) Return the first SellerPspConfiguration filtered by the psp_configuration column
 * @method     SellerPspConfiguration findOneByCreatedAt(string $created_at) Return the first SellerPspConfiguration filtered by the created_at column
 * @method     SellerPspConfiguration findOneByUpdatedAt(string $updated_at) Return the first SellerPspConfiguration filtered by the updated_at column
 *
 * @method     array findById(int $id) Return SellerPspConfiguration objects filtered by the id column
 * @method     array findBySellerId(int $seller_id) Return SellerPspConfiguration objects filtered by the seller_id column
 * @method     array findByPspName(string $psp_name) Return SellerPspConfiguration objects filtered by the psp_name column
 * @method     array findByServiceType(string $service_type) Return SellerPspConfiguration objects filtered by the service_type column
 * @method     array findByPspConfiguration( $psp_configuration) Return SellerPspConfiguration objects filtered by the psp_configuration column
 * @method     array findByCreatedAt(string $created_at) Return SellerPspConfiguration objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return SellerPspConfiguration objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.payment.om
 */
abstract class BaseSellerPspConfigurationQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BaseSellerPspConfigurationQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'SellerPspConfiguration', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new SellerPspConfigurationQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     SellerPspConfigurationQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return SellerPspConfigurationQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof SellerPspConfigurationQuery) {
            return $criteria;
        }
        $query = new SellerPspConfigurationQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   SellerPspConfiguration|SellerPspConfiguration[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = SellerPspConfigurationPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(SellerPspConfigurationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   SellerPspConfiguration A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `SELLER_ID`, `PSP_NAME`, `SERVICE_TYPE`, `PSP_CONFIGURATION`, `CREATED_AT`, `UPDATED_AT` FROM `seller_psp_configuration` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new SellerPspConfiguration();
            $obj->hydrate($row);
            SellerPspConfigurationPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return SellerPspConfiguration|SellerPspConfiguration[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|SellerPspConfiguration[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(SellerPspConfigurationPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(SellerPspConfigurationPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the seller_id column
     *
     * Example usage:
     * <code>
     * $query->filterBySellerId(1234); // WHERE seller_id = 1234
     * $query->filterBySellerId(array(12, 34)); // WHERE seller_id IN (12, 34)
     * $query->filterBySellerId(array('min' => 12)); // WHERE seller_id > 12
     * </code>
     *
     * @see       filterBySeller()
     *
     * @param     mixed $sellerId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterBySellerId($sellerId = null, $comparison = null)
    {
        if (is_array($sellerId)) {
            $useMinMax = false;
            if (isset($sellerId['min'])) {
                $this->addUsingAlias(SellerPspConfigurationPeer::SELLER_ID, $sellerId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sellerId['max'])) {
                $this->addUsingAlias(SellerPspConfigurationPeer::SELLER_ID, $sellerId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::SELLER_ID, $sellerId, $comparison);
    }

    /**
     * Filter the query on the psp_name column
     *
     * Example usage:
     * <code>
     * $query->filterByPspName('fooValue');   // WHERE psp_name = 'fooValue'
     * $query->filterByPspName('%fooValue%'); // WHERE psp_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pspName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByPspName($pspName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pspName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pspName)) {
                $pspName = str_replace('*', '%', $pspName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::PSP_NAME, $pspName, $comparison);
    }

    /**
     * Filter the query on the service_type column
     *
     * Example usage:
     * <code>
     * $query->filterByServiceType('fooValue');   // WHERE service_type = 'fooValue'
     * $query->filterByServiceType('%fooValue%'); // WHERE service_type LIKE '%fooValue%'
     * </code>
     *
     * @param     string $serviceType The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByServiceType($serviceType = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($serviceType)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $serviceType)) {
                $serviceType = str_replace('*', '%', $serviceType);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::SERVICE_TYPE, $serviceType, $comparison);
    }

    /**
     * Filter the query on the psp_configuration column
     *
     * @param     mixed $pspConfiguration The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByPspConfiguration($pspConfiguration = null, $comparison = null)
    {
        if (is_object($pspConfiguration)) {
            $pspConfiguration = serialize($pspConfiguration);
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::PSP_CONFIGURATION, $pspConfiguration, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(SellerPspConfigurationPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(SellerPspConfigurationPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(SellerPspConfigurationPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(SellerPspConfigurationPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(SellerPspConfigurationPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query by a related Seller object
     *
     * @param   Seller|PropelObjectCollection $seller The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   SellerPspConfigurationQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBySeller($seller, $comparison = null)
    {
        if ($seller instanceof Seller) {
            return $this
                ->addUsingAlias(SellerPspConfigurationPeer::SELLER_ID, $seller->getId(), $comparison);
        } elseif ($seller instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(SellerPspConfigurationPeer::SELLER_ID, $seller->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBySeller() only accepts arguments of type Seller or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Seller relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function joinSeller($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Seller');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Seller');
        }

        return $this;
    }

    /**
     * Use the Seller relation Seller object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   SellerQuery A secondary query class using the current class as primary query
     */
    public function useSellerQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinSeller($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Seller', 'SellerQuery');
    }

    /**
     * Filter the query by a related Order object
     *
     * @param   Order|PropelObjectCollection $order  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   SellerPspConfigurationQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByOrder($order, $comparison = null)
    {
        if ($order instanceof Order) {
            return $this
                ->addUsingAlias(SellerPspConfigurationPeer::ID, $order->getSellerPspConfigurationId(), $comparison);
        } elseif ($order instanceof PropelObjectCollection) {
            return $this
                ->useOrderQuery()
                ->filterByPrimaryKeys($order->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByOrder() only accepts arguments of type Order or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Order relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function joinOrder($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Order');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Order');
        }

        return $this;
    }

    /**
     * Use the Order relation Order object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   OrderQuery A secondary query class using the current class as primary query
     */
    public function useOrderQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinOrder($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Order', 'OrderQuery');
    }

    /**
     * Filter the query by a related Template object
     *
     * @param   Template|PropelObjectCollection $template  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   SellerPspConfigurationQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTemplate($template, $comparison = null)
    {
        if ($template instanceof Template) {
            return $this
                ->addUsingAlias(SellerPspConfigurationPeer::ID, $template->getSellerPspConfigurationId(), $comparison);
        } elseif ($template instanceof PropelObjectCollection) {
            return $this
                ->useTemplateQuery()
                ->filterByPrimaryKeys($template->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTemplate() only accepts arguments of type Template or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Template relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function joinTemplate($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Template');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Template');
        }

        return $this;
    }

    /**
     * Use the Template relation Template object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TemplateQuery A secondary query class using the current class as primary query
     */
    public function useTemplateQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTemplate($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Template', 'TemplateQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   SellerPspConfiguration $sellerPspConfiguration Object to remove from the list of results
     *
     * @return SellerPspConfigurationQuery The current query, for fluid interface
     */
    public function prune($sellerPspConfiguration = null)
    {
        if ($sellerPspConfiguration) {
            $this->addUsingAlias(SellerPspConfigurationPeer::ID, $sellerPspConfiguration->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     SellerPspConfigurationQuery The current query, for fluid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
	    return $this->addUsingAlias(SellerPspConfigurationPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     SellerPspConfigurationQuery The current query, for fluid interface
	 */
	public function lastUpdatedFirst()
	{
	    return $this->addDescendingOrderByColumn(SellerPspConfigurationPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     SellerPspConfigurationQuery The current query, for fluid interface
	 */
	public function firstUpdatedFirst()
	{
	    return $this->addAscendingOrderByColumn(SellerPspConfigurationPeer::UPDATED_AT);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     SellerPspConfigurationQuery The current query, for fluid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
	    return $this->addUsingAlias(SellerPspConfigurationPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     SellerPspConfigurationQuery The current query, for fluid interface
	 */
	public function lastCreatedFirst()
	{
	    return $this->addDescendingOrderByColumn(SellerPspConfigurationPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     SellerPspConfigurationQuery The current query, for fluid interface
	 */
	public function firstCreatedFirst()
	{
	    return $this->addAscendingOrderByColumn(SellerPspConfigurationPeer::CREATED_AT);
	}
} // BaseSellerPspConfigurationQuery