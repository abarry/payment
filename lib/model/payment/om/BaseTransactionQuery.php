<?php


/**
 * Base class that represents a query for the 'transaction' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Sat Aug 25 00:34:26 2012
 *
 * @method     TransactionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     TransactionQuery orderByReference($order = Criteria::ASC) Order by the reference column
 * @method     TransactionQuery orderByTaxes($order = Criteria::ASC) Order by the taxes column
 * @method     TransactionQuery orderByCurrency($order = Criteria::ASC) Order by the currency column
 * @method     TransactionQuery orderByStatus($order = Criteria::ASC) Order by the status column
 * @method     TransactionQuery orderByIsProcessed($order = Criteria::ASC) Order by the is_processed column
 * @method     TransactionQuery orderByOrderId($order = Criteria::ASC) Order by the order_id column
 * @method     TransactionQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     TransactionQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     TransactionQuery groupById() Group by the id column
 * @method     TransactionQuery groupByReference() Group by the reference column
 * @method     TransactionQuery groupByTaxes() Group by the taxes column
 * @method     TransactionQuery groupByCurrency() Group by the currency column
 * @method     TransactionQuery groupByStatus() Group by the status column
 * @method     TransactionQuery groupByIsProcessed() Group by the is_processed column
 * @method     TransactionQuery groupByOrderId() Group by the order_id column
 * @method     TransactionQuery groupByCreatedAt() Group by the created_at column
 * @method     TransactionQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     TransactionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     TransactionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     TransactionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     TransactionQuery leftJoinOrder($relationAlias = null) Adds a LEFT JOIN clause to the query using the Order relation
 * @method     TransactionQuery rightJoinOrder($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Order relation
 * @method     TransactionQuery innerJoinOrder($relationAlias = null) Adds a INNER JOIN clause to the query using the Order relation
 *
 * @method     TransactionQuery leftJoinTransactionExtraProperty($relationAlias = null) Adds a LEFT JOIN clause to the query using the TransactionExtraProperty relation
 * @method     TransactionQuery rightJoinTransactionExtraProperty($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TransactionExtraProperty relation
 * @method     TransactionQuery innerJoinTransactionExtraProperty($relationAlias = null) Adds a INNER JOIN clause to the query using the TransactionExtraProperty relation
 *
 * @method     Transaction findOne(PropelPDO $con = null) Return the first Transaction matching the query
 * @method     Transaction findOneOrCreate(PropelPDO $con = null) Return the first Transaction matching the query, or a new Transaction object populated from the query conditions when no match is found
 *
 * @method     Transaction findOneById(int $id) Return the first Transaction filtered by the id column
 * @method     Transaction findOneByReference(string $reference) Return the first Transaction filtered by the reference column
 * @method     Transaction findOneByTaxes(string $taxes) Return the first Transaction filtered by the taxes column
 * @method     Transaction findOneByCurrency(string $currency) Return the first Transaction filtered by the currency column
 * @method     Transaction findOneByStatus(string $status) Return the first Transaction filtered by the status column
 * @method     Transaction findOneByIsProcessed(boolean $is_processed) Return the first Transaction filtered by the is_processed column
 * @method     Transaction findOneByOrderId(int $order_id) Return the first Transaction filtered by the order_id column
 * @method     Transaction findOneByCreatedAt(string $created_at) Return the first Transaction filtered by the created_at column
 * @method     Transaction findOneByUpdatedAt(string $updated_at) Return the first Transaction filtered by the updated_at column
 *
 * @method     array findById(int $id) Return Transaction objects filtered by the id column
 * @method     array findByReference(string $reference) Return Transaction objects filtered by the reference column
 * @method     array findByTaxes(string $taxes) Return Transaction objects filtered by the taxes column
 * @method     array findByCurrency(string $currency) Return Transaction objects filtered by the currency column
 * @method     array findByStatus(string $status) Return Transaction objects filtered by the status column
 * @method     array findByIsProcessed(boolean $is_processed) Return Transaction objects filtered by the is_processed column
 * @method     array findByOrderId(int $order_id) Return Transaction objects filtered by the order_id column
 * @method     array findByCreatedAt(string $created_at) Return Transaction objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return Transaction objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.payment.om
 */
abstract class BaseTransactionQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BaseTransactionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Transaction', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TransactionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TransactionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TransactionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TransactionQuery) {
            return $criteria;
        }
        $query = new TransactionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Transaction|Transaction[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TransactionPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TransactionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Transaction A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `REFERENCE`, `TAXES`, `CURRENCY`, `STATUS`, `IS_PROCESSED`, `ORDER_ID`, `CREATED_AT`, `UPDATED_AT` FROM `transaction` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Transaction();
            $obj->hydrate($row);
            TransactionPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Transaction|Transaction[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Transaction[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TransactionPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TransactionPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TransactionPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the reference column
     *
     * Example usage:
     * <code>
     * $query->filterByReference('fooValue');   // WHERE reference = 'fooValue'
     * $query->filterByReference('%fooValue%'); // WHERE reference LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reference The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByReference($reference = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reference)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reference)) {
                $reference = str_replace('*', '%', $reference);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TransactionPeer::REFERENCE, $reference, $comparison);
    }

    /**
     * Filter the query on the taxes column
     *
     * Example usage:
     * <code>
     * $query->filterByTaxes(1234); // WHERE taxes = 1234
     * $query->filterByTaxes(array(12, 34)); // WHERE taxes IN (12, 34)
     * $query->filterByTaxes(array('min' => 12)); // WHERE taxes > 12
     * </code>
     *
     * @param     mixed $taxes The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByTaxes($taxes = null, $comparison = null)
    {
        if (is_array($taxes)) {
            $useMinMax = false;
            if (isset($taxes['min'])) {
                $this->addUsingAlias(TransactionPeer::TAXES, $taxes['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($taxes['max'])) {
                $this->addUsingAlias(TransactionPeer::TAXES, $taxes['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TransactionPeer::TAXES, $taxes, $comparison);
    }

    /**
     * Filter the query on the currency column
     *
     * Example usage:
     * <code>
     * $query->filterByCurrency('fooValue');   // WHERE currency = 'fooValue'
     * $query->filterByCurrency('%fooValue%'); // WHERE currency LIKE '%fooValue%'
     * </code>
     *
     * @param     string $currency The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByCurrency($currency = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($currency)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $currency)) {
                $currency = str_replace('*', '%', $currency);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TransactionPeer::CURRENCY, $currency, $comparison);
    }

    /**
     * Filter the query on the status column
     *
     * Example usage:
     * <code>
     * $query->filterByStatus('fooValue');   // WHERE status = 'fooValue'
     * $query->filterByStatus('%fooValue%'); // WHERE status LIKE '%fooValue%'
     * </code>
     *
     * @param     string $status The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByStatus($status = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($status)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $status)) {
                $status = str_replace('*', '%', $status);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TransactionPeer::STATUS, $status, $comparison);
    }

    /**
     * Filter the query on the is_processed column
     *
     * Example usage:
     * <code>
     * $query->filterByIsProcessed(true); // WHERE is_processed = true
     * $query->filterByIsProcessed('yes'); // WHERE is_processed = true
     * </code>
     *
     * @param     boolean|string $isProcessed The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByIsProcessed($isProcessed = null, $comparison = null)
    {
        if (is_string($isProcessed)) {
            $is_processed = in_array(strtolower($isProcessed), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(TransactionPeer::IS_PROCESSED, $isProcessed, $comparison);
    }

    /**
     * Filter the query on the order_id column
     *
     * Example usage:
     * <code>
     * $query->filterByOrderId(1234); // WHERE order_id = 1234
     * $query->filterByOrderId(array(12, 34)); // WHERE order_id IN (12, 34)
     * $query->filterByOrderId(array('min' => 12)); // WHERE order_id > 12
     * </code>
     *
     * @see       filterByOrder()
     *
     * @param     mixed $orderId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByOrderId($orderId = null, $comparison = null)
    {
        if (is_array($orderId)) {
            $useMinMax = false;
            if (isset($orderId['min'])) {
                $this->addUsingAlias(TransactionPeer::ORDER_ID, $orderId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($orderId['max'])) {
                $this->addUsingAlias(TransactionPeer::ORDER_ID, $orderId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TransactionPeer::ORDER_ID, $orderId, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TransactionPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TransactionPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TransactionPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TransactionPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TransactionPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TransactionPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query by a related Order object
     *
     * @param   Order|PropelObjectCollection $order The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TransactionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByOrder($order, $comparison = null)
    {
        if ($order instanceof Order) {
            return $this
                ->addUsingAlias(TransactionPeer::ORDER_ID, $order->getId(), $comparison);
        } elseif ($order instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TransactionPeer::ORDER_ID, $order->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByOrder() only accepts arguments of type Order or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Order relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function joinOrder($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Order');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Order');
        }

        return $this;
    }

    /**
     * Use the Order relation Order object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   OrderQuery A secondary query class using the current class as primary query
     */
    public function useOrderQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinOrder($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Order', 'OrderQuery');
    }

    /**
     * Filter the query by a related TransactionExtraProperty object
     *
     * @param   TransactionExtraProperty|PropelObjectCollection $transactionExtraProperty  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TransactionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTransactionExtraProperty($transactionExtraProperty, $comparison = null)
    {
        if ($transactionExtraProperty instanceof TransactionExtraProperty) {
            return $this
                ->addUsingAlias(TransactionPeer::ID, $transactionExtraProperty->getTransactionId(), $comparison);
        } elseif ($transactionExtraProperty instanceof PropelObjectCollection) {
            return $this
                ->useTransactionExtraPropertyQuery()
                ->filterByPrimaryKeys($transactionExtraProperty->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTransactionExtraProperty() only accepts arguments of type TransactionExtraProperty or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TransactionExtraProperty relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function joinTransactionExtraProperty($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TransactionExtraProperty');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TransactionExtraProperty');
        }

        return $this;
    }

    /**
     * Use the TransactionExtraProperty relation TransactionExtraProperty object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TransactionExtraPropertyQuery A secondary query class using the current class as primary query
     */
    public function useTransactionExtraPropertyQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTransactionExtraProperty($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TransactionExtraProperty', 'TransactionExtraPropertyQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Transaction $transaction Object to remove from the list of results
     *
     * @return TransactionQuery The current query, for fluid interface
     */
    public function prune($transaction = null)
    {
        if ($transaction) {
            $this->addUsingAlias(TransactionPeer::ID, $transaction->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     TransactionQuery The current query, for fluid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
	    return $this->addUsingAlias(TransactionPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     TransactionQuery The current query, for fluid interface
	 */
	public function lastUpdatedFirst()
	{
	    return $this->addDescendingOrderByColumn(TransactionPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     TransactionQuery The current query, for fluid interface
	 */
	public function firstUpdatedFirst()
	{
	    return $this->addAscendingOrderByColumn(TransactionPeer::UPDATED_AT);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     TransactionQuery The current query, for fluid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
	    return $this->addUsingAlias(TransactionPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     TransactionQuery The current query, for fluid interface
	 */
	public function lastCreatedFirst()
	{
	    return $this->addDescendingOrderByColumn(TransactionPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     TransactionQuery The current query, for fluid interface
	 */
	public function firstCreatedFirst()
	{
	    return $this->addAscendingOrderByColumn(TransactionPeer::CREATED_AT);
	}
	// extra_properties behavior
	/**
	 * Filter based on an extra property
	 *
	 * If the property is not set for a particular object it will be present in the results
	 *
	 * @var string $propertyName The name of the property to filter on
	 * @var mixed $propertyValue The value of the property to filter on
	 *
	 * @return TransactionQuery
	 */
	public function filterByExtraProperty($propertyName, $propertyValue)
	{
	  $propertyName = TransactionPeer::normalizeExtraPropertyName($propertyName);
	  $propertyValue = TransactionPeer::normalizeExtraPropertyValue($propertyValue);
	
	  return $this
	    ->leftJoinTransactionExtraProperty($joinName = $propertyName . '_' . uniqid())
	    ->addJoinCondition($joinName, "{$joinName}.PropertyName = ?", $propertyName)
	    ->where("{$joinName}.PropertyValue = ?", $propertyValue);
	}
	
	/**
	 * Filter based on an extra property
	 *
	 * If the property is not set for a particular object it it will be assumed
	 * to have a value of $default
	 *
	 * @var string $propertyName The name of the property to filter on
	 * @var mixed $propertyValue The value of the property to filter on
	 * @var mixed $default The value that will be assumed as default if an object
	 *                     does not have the property set
	 *
	 * @return TransactionQuery
	 */
	public function filterByExtraPropertyWithDefault($propertyName, $propertyValue, $default)
	{
	  $propertyName = TransactionPeer::normalizeExtraPropertyName($propertyName);
	  $propertyValue = TransactionPeer::normalizeExtraPropertyValue($propertyValue);
	  $default = TransactionPeer::normalizeExtraPropertyValue($default);
	
	  return $this
	    ->leftJoinTransactionExtraProperty($joinName = $propertyName . '_' . uniqid())
	    ->addJoinCondition($joinName, "{$joinName}.PropertyName = ?", $propertyName)
	    ->where("COALESCE({$joinName}.PropertyValue, '{$default}') = ?", $propertyValue);
	}
	

} // BaseTransactionQuery