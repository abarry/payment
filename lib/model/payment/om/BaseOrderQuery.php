<?php


/**
 * Base class that represents a query for the 'order' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Sat Aug 25 00:34:26 2012
 *
 * @method     OrderQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     OrderQuery orderByReference($order = Criteria::ASC) Order by the reference column
 * @method     OrderQuery orderByAmount($order = Criteria::ASC) Order by the amount column
 * @method     OrderQuery orderByHash($order = Criteria::ASC) Order by the hash column
 * @method     OrderQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method     OrderQuery orderBySellerPspConfigurationId($order = Criteria::ASC) Order by the seller_psp_configuration_id column
 * @method     OrderQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     OrderQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     OrderQuery groupById() Group by the id column
 * @method     OrderQuery groupByReference() Group by the reference column
 * @method     OrderQuery groupByAmount() Group by the amount column
 * @method     OrderQuery groupByHash() Group by the hash column
 * @method     OrderQuery groupByUserId() Group by the user_id column
 * @method     OrderQuery groupBySellerPspConfigurationId() Group by the seller_psp_configuration_id column
 * @method     OrderQuery groupByCreatedAt() Group by the created_at column
 * @method     OrderQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     OrderQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     OrderQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     OrderQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     OrderQuery leftJoinSellerPspConfiguration($relationAlias = null) Adds a LEFT JOIN clause to the query using the SellerPspConfiguration relation
 * @method     OrderQuery rightJoinSellerPspConfiguration($relationAlias = null) Adds a RIGHT JOIN clause to the query using the SellerPspConfiguration relation
 * @method     OrderQuery innerJoinSellerPspConfiguration($relationAlias = null) Adds a INNER JOIN clause to the query using the SellerPspConfiguration relation
 *
 * @method     OrderQuery leftJoinTransaction($relationAlias = null) Adds a LEFT JOIN clause to the query using the Transaction relation
 * @method     OrderQuery rightJoinTransaction($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Transaction relation
 * @method     OrderQuery innerJoinTransaction($relationAlias = null) Adds a INNER JOIN clause to the query using the Transaction relation
 *
 * @method     OrderQuery leftJoinOrderExtraProperty($relationAlias = null) Adds a LEFT JOIN clause to the query using the OrderExtraProperty relation
 * @method     OrderQuery rightJoinOrderExtraProperty($relationAlias = null) Adds a RIGHT JOIN clause to the query using the OrderExtraProperty relation
 * @method     OrderQuery innerJoinOrderExtraProperty($relationAlias = null) Adds a INNER JOIN clause to the query using the OrderExtraProperty relation
 *
 * @method     Order findOne(PropelPDO $con = null) Return the first Order matching the query
 * @method     Order findOneOrCreate(PropelPDO $con = null) Return the first Order matching the query, or a new Order object populated from the query conditions when no match is found
 *
 * @method     Order findOneById(int $id) Return the first Order filtered by the id column
 * @method     Order findOneByReference(string $reference) Return the first Order filtered by the reference column
 * @method     Order findOneByAmount(string $amount) Return the first Order filtered by the amount column
 * @method     Order findOneByHash(string $hash) Return the first Order filtered by the hash column
 * @method     Order findOneByUserId(int $user_id) Return the first Order filtered by the user_id column
 * @method     Order findOneBySellerPspConfigurationId(int $seller_psp_configuration_id) Return the first Order filtered by the seller_psp_configuration_id column
 * @method     Order findOneByCreatedAt(string $created_at) Return the first Order filtered by the created_at column
 * @method     Order findOneByUpdatedAt(string $updated_at) Return the first Order filtered by the updated_at column
 *
 * @method     array findById(int $id) Return Order objects filtered by the id column
 * @method     array findByReference(string $reference) Return Order objects filtered by the reference column
 * @method     array findByAmount(string $amount) Return Order objects filtered by the amount column
 * @method     array findByHash(string $hash) Return Order objects filtered by the hash column
 * @method     array findByUserId(int $user_id) Return Order objects filtered by the user_id column
 * @method     array findBySellerPspConfigurationId(int $seller_psp_configuration_id) Return Order objects filtered by the seller_psp_configuration_id column
 * @method     array findByCreatedAt(string $created_at) Return Order objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return Order objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.payment.om
 */
abstract class BaseOrderQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BaseOrderQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Order', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new OrderQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     OrderQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return OrderQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof OrderQuery) {
            return $criteria;
        }
        $query = new OrderQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Order|Order[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = OrderPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(OrderPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Order A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `REFERENCE`, `AMOUNT`, `HASH`, `USER_ID`, `SELLER_PSP_CONFIGURATION_ID`, `CREATED_AT`, `UPDATED_AT` FROM `order` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Order();
            $obj->hydrate($row);
            OrderPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Order|Order[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Order[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(OrderPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(OrderPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(OrderPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the reference column
     *
     * Example usage:
     * <code>
     * $query->filterByReference('fooValue');   // WHERE reference = 'fooValue'
     * $query->filterByReference('%fooValue%'); // WHERE reference LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reference The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByReference($reference = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reference)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reference)) {
                $reference = str_replace('*', '%', $reference);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(OrderPeer::REFERENCE, $reference, $comparison);
    }

    /**
     * Filter the query on the amount column
     *
     * Example usage:
     * <code>
     * $query->filterByAmount(1234); // WHERE amount = 1234
     * $query->filterByAmount(array(12, 34)); // WHERE amount IN (12, 34)
     * $query->filterByAmount(array('min' => 12)); // WHERE amount > 12
     * </code>
     *
     * @param     mixed $amount The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByAmount($amount = null, $comparison = null)
    {
        if (is_array($amount)) {
            $useMinMax = false;
            if (isset($amount['min'])) {
                $this->addUsingAlias(OrderPeer::AMOUNT, $amount['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($amount['max'])) {
                $this->addUsingAlias(OrderPeer::AMOUNT, $amount['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(OrderPeer::AMOUNT, $amount, $comparison);
    }

    /**
     * Filter the query on the hash column
     *
     * Example usage:
     * <code>
     * $query->filterByHash('fooValue');   // WHERE hash = 'fooValue'
     * $query->filterByHash('%fooValue%'); // WHERE hash LIKE '%fooValue%'
     * </code>
     *
     * @param     string $hash The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByHash($hash = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($hash)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $hash)) {
                $hash = str_replace('*', '%', $hash);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(OrderPeer::HASH, $hash, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId(1234); // WHERE user_id = 1234
     * $query->filterByUserId(array(12, 34)); // WHERE user_id IN (12, 34)
     * $query->filterByUserId(array('min' => 12)); // WHERE user_id > 12
     * </code>
     *
     * @param     mixed $userId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (is_array($userId)) {
            $useMinMax = false;
            if (isset($userId['min'])) {
                $this->addUsingAlias(OrderPeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($userId['max'])) {
                $this->addUsingAlias(OrderPeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(OrderPeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query on the seller_psp_configuration_id column
     *
     * Example usage:
     * <code>
     * $query->filterBySellerPspConfigurationId(1234); // WHERE seller_psp_configuration_id = 1234
     * $query->filterBySellerPspConfigurationId(array(12, 34)); // WHERE seller_psp_configuration_id IN (12, 34)
     * $query->filterBySellerPspConfigurationId(array('min' => 12)); // WHERE seller_psp_configuration_id > 12
     * </code>
     *
     * @see       filterBySellerPspConfiguration()
     *
     * @param     mixed $sellerPspConfigurationId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterBySellerPspConfigurationId($sellerPspConfigurationId = null, $comparison = null)
    {
        if (is_array($sellerPspConfigurationId)) {
            $useMinMax = false;
            if (isset($sellerPspConfigurationId['min'])) {
                $this->addUsingAlias(OrderPeer::SELLER_PSP_CONFIGURATION_ID, $sellerPspConfigurationId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sellerPspConfigurationId['max'])) {
                $this->addUsingAlias(OrderPeer::SELLER_PSP_CONFIGURATION_ID, $sellerPspConfigurationId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(OrderPeer::SELLER_PSP_CONFIGURATION_ID, $sellerPspConfigurationId, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(OrderPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(OrderPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(OrderPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(OrderPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(OrderPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(OrderPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query by a related SellerPspConfiguration object
     *
     * @param   SellerPspConfiguration|PropelObjectCollection $sellerPspConfiguration The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   OrderQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBySellerPspConfiguration($sellerPspConfiguration, $comparison = null)
    {
        if ($sellerPspConfiguration instanceof SellerPspConfiguration) {
            return $this
                ->addUsingAlias(OrderPeer::SELLER_PSP_CONFIGURATION_ID, $sellerPspConfiguration->getId(), $comparison);
        } elseif ($sellerPspConfiguration instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(OrderPeer::SELLER_PSP_CONFIGURATION_ID, $sellerPspConfiguration->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBySellerPspConfiguration() only accepts arguments of type SellerPspConfiguration or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the SellerPspConfiguration relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function joinSellerPspConfiguration($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('SellerPspConfiguration');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'SellerPspConfiguration');
        }

        return $this;
    }

    /**
     * Use the SellerPspConfiguration relation SellerPspConfiguration object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   SellerPspConfigurationQuery A secondary query class using the current class as primary query
     */
    public function useSellerPspConfigurationQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinSellerPspConfiguration($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'SellerPspConfiguration', 'SellerPspConfigurationQuery');
    }

    /**
     * Filter the query by a related Transaction object
     *
     * @param   Transaction|PropelObjectCollection $transaction  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   OrderQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTransaction($transaction, $comparison = null)
    {
        if ($transaction instanceof Transaction) {
            return $this
                ->addUsingAlias(OrderPeer::ID, $transaction->getOrderId(), $comparison);
        } elseif ($transaction instanceof PropelObjectCollection) {
            return $this
                ->useTransactionQuery()
                ->filterByPrimaryKeys($transaction->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTransaction() only accepts arguments of type Transaction or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Transaction relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function joinTransaction($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Transaction');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Transaction');
        }

        return $this;
    }

    /**
     * Use the Transaction relation Transaction object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TransactionQuery A secondary query class using the current class as primary query
     */
    public function useTransactionQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTransaction($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Transaction', 'TransactionQuery');
    }

    /**
     * Filter the query by a related OrderExtraProperty object
     *
     * @param   OrderExtraProperty|PropelObjectCollection $orderExtraProperty  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   OrderQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByOrderExtraProperty($orderExtraProperty, $comparison = null)
    {
        if ($orderExtraProperty instanceof OrderExtraProperty) {
            return $this
                ->addUsingAlias(OrderPeer::ID, $orderExtraProperty->getOrderId(), $comparison);
        } elseif ($orderExtraProperty instanceof PropelObjectCollection) {
            return $this
                ->useOrderExtraPropertyQuery()
                ->filterByPrimaryKeys($orderExtraProperty->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByOrderExtraProperty() only accepts arguments of type OrderExtraProperty or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the OrderExtraProperty relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function joinOrderExtraProperty($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('OrderExtraProperty');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'OrderExtraProperty');
        }

        return $this;
    }

    /**
     * Use the OrderExtraProperty relation OrderExtraProperty object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   OrderExtraPropertyQuery A secondary query class using the current class as primary query
     */
    public function useOrderExtraPropertyQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinOrderExtraProperty($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'OrderExtraProperty', 'OrderExtraPropertyQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Order $order Object to remove from the list of results
     *
     * @return OrderQuery The current query, for fluid interface
     */
    public function prune($order = null)
    {
        if ($order) {
            $this->addUsingAlias(OrderPeer::ID, $order->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     OrderQuery The current query, for fluid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
	    return $this->addUsingAlias(OrderPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     OrderQuery The current query, for fluid interface
	 */
	public function lastUpdatedFirst()
	{
	    return $this->addDescendingOrderByColumn(OrderPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     OrderQuery The current query, for fluid interface
	 */
	public function firstUpdatedFirst()
	{
	    return $this->addAscendingOrderByColumn(OrderPeer::UPDATED_AT);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     OrderQuery The current query, for fluid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
	    return $this->addUsingAlias(OrderPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     OrderQuery The current query, for fluid interface
	 */
	public function lastCreatedFirst()
	{
	    return $this->addDescendingOrderByColumn(OrderPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     OrderQuery The current query, for fluid interface
	 */
	public function firstCreatedFirst()
	{
	    return $this->addAscendingOrderByColumn(OrderPeer::CREATED_AT);
	}
	// extra_properties behavior
	/**
	 * Filter based on an extra property
	 *
	 * If the property is not set for a particular object it will be present in the results
	 *
	 * @var string $propertyName The name of the property to filter on
	 * @var mixed $propertyValue The value of the property to filter on
	 *
	 * @return OrderQuery
	 */
	public function filterByExtraProperty($propertyName, $propertyValue)
	{
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  $propertyValue = OrderPeer::normalizeExtraPropertyValue($propertyValue);
	
	  return $this
	    ->leftJoinOrderExtraProperty($joinName = $propertyName . '_' . uniqid())
	    ->addJoinCondition($joinName, "{$joinName}.PropertyName = ?", $propertyName)
	    ->where("{$joinName}.PropertyValue = ?", $propertyValue);
	}
	
	/**
	 * Filter based on an extra property
	 *
	 * If the property is not set for a particular object it it will be assumed
	 * to have a value of $default
	 *
	 * @var string $propertyName The name of the property to filter on
	 * @var mixed $propertyValue The value of the property to filter on
	 * @var mixed $default The value that will be assumed as default if an object
	 *                     does not have the property set
	 *
	 * @return OrderQuery
	 */
	public function filterByExtraPropertyWithDefault($propertyName, $propertyValue, $default)
	{
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  $propertyValue = OrderPeer::normalizeExtraPropertyValue($propertyValue);
	  $default = OrderPeer::normalizeExtraPropertyValue($default);
	
	  return $this
	    ->leftJoinOrderExtraProperty($joinName = $propertyName . '_' . uniqid())
	    ->addJoinCondition($joinName, "{$joinName}.PropertyName = ?", $propertyName)
	    ->where("COALESCE({$joinName}.PropertyValue, '{$default}') = ?", $propertyValue);
	}
	

} // BaseOrderQuery