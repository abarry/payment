<?php


/**
 * Base class that represents a row from the 'order' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Sat Aug 25 00:34:26 2012
 *
 * @package    propel.generator.lib.model.payment.om
 */
abstract class BaseOrder extends BaseObject 
{

    /**
     * Peer class name
     */
    const PEER = 'OrderPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        OrderPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the reference field.
     * @var        string
     */
    protected $reference;

    /**
     * The value for the amount field.
     * @var        string
     */
    protected $amount;

    /**
     * The value for the hash field.
     * @var        string
     */
    protected $hash;

    /**
     * The value for the user_id field.
     * @var        int
     */
    protected $user_id;

    /**
     * The value for the seller_psp_configuration_id field.
     * @var        int
     */
    protected $seller_psp_configuration_id;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * @var        SellerPspConfiguration
     */
    protected $aSellerPspConfiguration;

    /**
     * @var        PropelObjectCollection|Transaction[] Collection to store aggregation of Transaction objects.
     */
    protected $collTransactions;

    /**
     * @var        PropelObjectCollection|OrderExtraProperty[] Collection to store aggregation of OrderExtraProperty objects.
     */
    protected $collOrderExtraPropertys;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

	// extra_properties behavior
	
	/** the list of all single properties */
	protected $extraProperties = array();
	/** the list of all multiple properties */
	protected $multipleExtraProperties = array();
    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $transactionsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $orderExtraPropertysScheduledForDeletion = null;

    /**
     * Get the [id] column value.
     * 
     * @return   int
     */
    public function getId()
    {

        return $this->id;
    }

    /**
     * Get the [reference] column value.
     * 
     * @return   string
     */
    public function getReference()
    {

        return $this->reference;
    }

    /**
     * Get the [amount] column value.
     * 
     * @return   string
     */
    public function getAmount()
    {

        return $this->amount;
    }

    /**
     * Get the [hash] column value.
     * 
     * @return   string
     */
    public function getHash()
    {

        return $this->hash;
    }

    /**
     * Get the [user_id] column value.
     * 
     * @return   int
     */
    public function getUserId()
    {

        return $this->user_id;
    }

    /**
     * Get the [seller_psp_configuration_id] column value.
     * 
     * @return   int
     */
    public function getSellerPspConfigurationId()
    {

        return $this->seller_psp_configuration_id;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     * 
     *
     * @param      string $format The date/time format string (either date()-style or strftime()-style).
     *							If format is NULL, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }


        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of NULL,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is TRUE, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     * 
     *
     * @param      string $format The date/time format string (either date()-style or strftime()-style).
     *							If format is NULL, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }


        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of NULL,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is TRUE, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Set the value of [id] column.
     * 
     * @param      int $v new value
     * @return   Order The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = OrderPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [reference] column.
     * 
     * @param      string $v new value
     * @return   Order The current object (for fluent API support)
     */
    public function setReference($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->reference !== $v) {
            $this->reference = $v;
            $this->modifiedColumns[] = OrderPeer::REFERENCE;
        }


        return $this;
    } // setReference()

    /**
     * Set the value of [amount] column.
     * 
     * @param      string $v new value
     * @return   Order The current object (for fluent API support)
     */
    public function setAmount($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->amount !== $v) {
            $this->amount = $v;
            $this->modifiedColumns[] = OrderPeer::AMOUNT;
        }


        return $this;
    } // setAmount()

    /**
     * Set the value of [hash] column.
     * 
     * @param      string $v new value
     * @return   Order The current object (for fluent API support)
     */
    public function setHash($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->hash !== $v) {
            $this->hash = $v;
            $this->modifiedColumns[] = OrderPeer::HASH;
        }


        return $this;
    } // setHash()

    /**
     * Set the value of [user_id] column.
     * 
     * @param      int $v new value
     * @return   Order The current object (for fluent API support)
     */
    public function setUserId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->user_id !== $v) {
            $this->user_id = $v;
            $this->modifiedColumns[] = OrderPeer::USER_ID;
        }


        return $this;
    } // setUserId()

    /**
     * Set the value of [seller_psp_configuration_id] column.
     * 
     * @param      int $v new value
     * @return   Order The current object (for fluent API support)
     */
    public function setSellerPspConfigurationId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->seller_psp_configuration_id !== $v) {
            $this->seller_psp_configuration_id = $v;
            $this->modifiedColumns[] = OrderPeer::SELLER_PSP_CONFIGURATION_ID;
        }

        if ($this->aSellerPspConfiguration !== null && $this->aSellerPspConfiguration->getId() !== $v) {
            $this->aSellerPspConfiguration = null;
        }


        return $this;
    } // setSellerPspConfigurationId()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     * 
     * @param      mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as NULL.
     * @return   Order The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = OrderPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     * 
     * @param      mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as NULL.
     * @return   Order The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = OrderPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
        // otherwise, everything was equal, so return TRUE
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->reference = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->amount = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->hash = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->user_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->seller_psp_configuration_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->created_at = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->updated_at = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 8; // 8 = OrderPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Order object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aSellerPspConfiguration !== null && $this->seller_psp_configuration_id !== $this->aSellerPspConfiguration->getId()) {
            $this->aSellerPspConfiguration = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param      boolean $deep (optional) Whether to also de-associated any related objects.
     * @param      PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(OrderPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = OrderPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aSellerPspConfiguration = null;
            $this->collTransactions = null;

            $this->collOrderExtraPropertys = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param      PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(OrderPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = OrderQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrder:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrder:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param      PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(OrderPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrder:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(OrderPeer::UPDATED_AT))
			{
				$this->setUpdatedAt(time());
			}
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
				// timestampable behavior
				if (!$this->isColumnModified(OrderPeer::CREATED_AT)) {
				    $this->setCreatedAt(time());
				}
				if (!$this->isColumnModified(OrderPeer::UPDATED_AT)) {
				    $this->setUpdatedAt(time());
				}
				// symfony_timestampable behavior
				if (!$this->isColumnModified(OrderPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

            } else {
                $ret = $ret && $this->preUpdate($con);
				// timestampable behavior
				if ($this->isModified() && !$this->isColumnModified(OrderPeer::UPDATED_AT)) {
				    $this->setUpdatedAt(time());
				}
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrder:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

                OrderPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param      PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aSellerPspConfiguration !== null) {
                if ($this->aSellerPspConfiguration->isModified() || $this->aSellerPspConfiguration->isNew()) {
                    $affectedRows += $this->aSellerPspConfiguration->save($con);
                }
                $this->setSellerPspConfiguration($this->aSellerPspConfiguration);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->transactionsScheduledForDeletion !== null) {
                if (!$this->transactionsScheduledForDeletion->isEmpty()) {
                    TransactionQuery::create()
                        ->filterByPrimaryKeys($this->transactionsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->transactionsScheduledForDeletion = null;
                }
            }

            if ($this->collTransactions !== null) {
                foreach ($this->collTransactions as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->orderExtraPropertysScheduledForDeletion !== null) {
                if (!$this->orderExtraPropertysScheduledForDeletion->isEmpty()) {
                    OrderExtraPropertyQuery::create()
                        ->filterByPrimaryKeys($this->orderExtraPropertysScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->orderExtraPropertysScheduledForDeletion = null;
                }
            }

            if ($this->collOrderExtraPropertys !== null) {
                foreach ($this->collOrderExtraPropertys as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param      PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = OrderPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . OrderPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(OrderPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(OrderPeer::REFERENCE)) {
            $modifiedColumns[':p' . $index++]  = '`REFERENCE`';
        }
        if ($this->isColumnModified(OrderPeer::AMOUNT)) {
            $modifiedColumns[':p' . $index++]  = '`AMOUNT`';
        }
        if ($this->isColumnModified(OrderPeer::HASH)) {
            $modifiedColumns[':p' . $index++]  = '`HASH`';
        }
        if ($this->isColumnModified(OrderPeer::USER_ID)) {
            $modifiedColumns[':p' . $index++]  = '`USER_ID`';
        }
        if ($this->isColumnModified(OrderPeer::SELLER_PSP_CONFIGURATION_ID)) {
            $modifiedColumns[':p' . $index++]  = '`SELLER_PSP_CONFIGURATION_ID`';
        }
        if ($this->isColumnModified(OrderPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(OrderPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }

        $sql = sprintf(
            'INSERT INTO `order` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
						$stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`REFERENCE`':
						$stmt->bindValue($identifier, $this->reference, PDO::PARAM_STR);
                        break;
                    case '`AMOUNT`':
						$stmt->bindValue($identifier, $this->amount, PDO::PARAM_STR);
                        break;
                    case '`HASH`':
						$stmt->bindValue($identifier, $this->hash, PDO::PARAM_STR);
                        break;
                    case '`USER_ID`':
						$stmt->bindValue($identifier, $this->user_id, PDO::PARAM_INT);
                        break;
                    case '`SELLER_PSP_CONFIGURATION_ID`':
						$stmt->bindValue($identifier, $this->seller_psp_configuration_id, PDO::PARAM_INT);
                        break;
                    case '`CREATED_AT`':
						$stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
						$stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
			$pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param      PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param      mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param      array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aSellerPspConfiguration !== null) {
                if (!$this->aSellerPspConfiguration->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aSellerPspConfiguration->getValidationFailures());
                }
            }


            if (($retval = OrderPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collTransactions !== null) {
                    foreach ($this->collTransactions as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collOrderExtraPropertys !== null) {
                    foreach ($this->collOrderExtraPropertys as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param      string $name name
     * @param      string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = OrderPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param      int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getReference();
                break;
            case 2:
                return $this->getAmount();
                break;
            case 3:
                return $this->getHash();
                break;
            case 4:
                return $this->getUserId();
                break;
            case 5:
                return $this->getSellerPspConfigurationId();
                break;
            case 6:
                return $this->getCreatedAt();
                break;
            case 7:
                return $this->getUpdatedAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Order'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Order'][$this->getPrimaryKey()] = true;
        $keys = OrderPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getReference(),
            $keys[2] => $this->getAmount(),
            $keys[3] => $this->getHash(),
            $keys[4] => $this->getUserId(),
            $keys[5] => $this->getSellerPspConfigurationId(),
            $keys[6] => $this->getCreatedAt(),
            $keys[7] => $this->getUpdatedAt(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aSellerPspConfiguration) {
                $result['SellerPspConfiguration'] = $this->aSellerPspConfiguration->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collTransactions) {
                $result['Transactions'] = $this->collTransactions->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collOrderExtraPropertys) {
                $result['OrderExtraPropertys'] = $this->collOrderExtraPropertys->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param      string $name peer name
     * @param      mixed $value field value
     * @param      string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = OrderPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param      int $pos position in xml schema
     * @param      mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setReference($value);
                break;
            case 2:
                $this->setAmount($value);
                break;
            case 3:
                $this->setHash($value);
                break;
            case 4:
                $this->setUserId($value);
                break;
            case 5:
                $this->setSellerPspConfigurationId($value);
                break;
            case 6:
                $this->setCreatedAt($value);
                break;
            case 7:
                $this->setUpdatedAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param      array  $arr     An array to populate the object from.
     * @param      string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = OrderPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setReference($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setAmount($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setHash($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setUserId($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setSellerPspConfigurationId($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setCreatedAt($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setUpdatedAt($arr[$keys[7]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(OrderPeer::DATABASE_NAME);

        if ($this->isColumnModified(OrderPeer::ID)) $criteria->add(OrderPeer::ID, $this->id);
        if ($this->isColumnModified(OrderPeer::REFERENCE)) $criteria->add(OrderPeer::REFERENCE, $this->reference);
        if ($this->isColumnModified(OrderPeer::AMOUNT)) $criteria->add(OrderPeer::AMOUNT, $this->amount);
        if ($this->isColumnModified(OrderPeer::HASH)) $criteria->add(OrderPeer::HASH, $this->hash);
        if ($this->isColumnModified(OrderPeer::USER_ID)) $criteria->add(OrderPeer::USER_ID, $this->user_id);
        if ($this->isColumnModified(OrderPeer::SELLER_PSP_CONFIGURATION_ID)) $criteria->add(OrderPeer::SELLER_PSP_CONFIGURATION_ID, $this->seller_psp_configuration_id);
        if ($this->isColumnModified(OrderPeer::CREATED_AT)) $criteria->add(OrderPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(OrderPeer::UPDATED_AT)) $criteria->add(OrderPeer::UPDATED_AT, $this->updated_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(OrderPeer::DATABASE_NAME);
        $criteria->add(OrderPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return   int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param       int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param      object $copyObj An object of Order (or compatible) type.
     * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setReference($this->getReference());
        $copyObj->setAmount($this->getAmount());
        $copyObj->setHash($this->getHash());
        $copyObj->setUserId($this->getUserId());
        $copyObj->setSellerPspConfigurationId($this->getSellerPspConfigurationId());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getTransactions() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addTransaction($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getOrderExtraPropertys() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addOrderExtraProperty($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return                 Order Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return   OrderPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new OrderPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a SellerPspConfiguration object.
     *
     * @param                  SellerPspConfiguration $v
     * @return                 Order The current object (for fluent API support)
     * @throws PropelException
     */
    public function setSellerPspConfiguration(SellerPspConfiguration $v = null)
    {
        if ($v === null) {
            $this->setSellerPspConfigurationId(NULL);
        } else {
            $this->setSellerPspConfigurationId($v->getId());
        }

        $this->aSellerPspConfiguration = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the SellerPspConfiguration object, it will not be re-added.
        if ($v !== null) {
            $v->addOrder($this);
        }


        return $this;
    }


    /**
     * Get the associated SellerPspConfiguration object
     *
     * @param      PropelPDO $con Optional Connection object.
     * @return                 SellerPspConfiguration The associated SellerPspConfiguration object.
     * @throws PropelException
     */
    public function getSellerPspConfiguration(PropelPDO $con = null)
    {
        if ($this->aSellerPspConfiguration === null && ($this->seller_psp_configuration_id !== null)) {
            $this->aSellerPspConfiguration = SellerPspConfigurationQuery::create()->findPk($this->seller_psp_configuration_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aSellerPspConfiguration->addOrders($this);
             */
        }

        return $this->aSellerPspConfiguration;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param      string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('Transaction' == $relationName) {
            $this->initTransactions();
        }
        if ('OrderExtraProperty' == $relationName) {
            $this->initOrderExtraPropertys();
        }
    }

    /**
     * Clears out the collTransactions collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addTransactions()
     */
    public function clearTransactions()
    {
        $this->collTransactions = null; // important to set this to NULL since that means it is uninitialized
    }

    /**
     * Initializes the collTransactions collection.
     *
     * By default this just sets the collTransactions collection to an empty array (like clearcollTransactions());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param      boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initTransactions($overrideExisting = true)
    {
        if (null !== $this->collTransactions && !$overrideExisting) {
            return;
        }
        $this->collTransactions = new PropelObjectCollection();
        $this->collTransactions->setModel('Transaction');
    }

    /**
     * Gets an array of Transaction objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Order is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @return PropelObjectCollection|Transaction[] List of Transaction objects
     * @throws PropelException
     */
    public function getTransactions($criteria = null, PropelPDO $con = null)
    {
        if (null === $this->collTransactions || null !== $criteria) {
            if ($this->isNew() && null === $this->collTransactions) {
                // return empty collection
                $this->initTransactions();
            } else {
                $collTransactions = TransactionQuery::create(null, $criteria)
                    ->filterByOrder($this)
                    ->find($con);
                if (null !== $criteria) {
                    return $collTransactions;
                }
                $this->collTransactions = $collTransactions;
            }
        }

        return $this->collTransactions;
    }

    /**
     * Sets a collection of Transaction objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param      PropelCollection $transactions A Propel collection.
     * @param      PropelPDO $con Optional connection object
     */
    public function setTransactions(PropelCollection $transactions, PropelPDO $con = null)
    {
        $this->transactionsScheduledForDeletion = $this->getTransactions(new Criteria(), $con)->diff($transactions);

        foreach ($this->transactionsScheduledForDeletion as $transactionRemoved) {
            $transactionRemoved->setOrder(null);
        }

        $this->collTransactions = null;
        foreach ($transactions as $transaction) {
            $this->addTransaction($transaction);
        }

        $this->collTransactions = $transactions;
    }

    /**
     * Returns the number of related Transaction objects.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct
     * @param      PropelPDO $con
     * @return int             Count of related Transaction objects.
     * @throws PropelException
     */
    public function countTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        if (null === $this->collTransactions || null !== $criteria) {
            if ($this->isNew() && null === $this->collTransactions) {
                return 0;
            } else {
                $query = TransactionQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByOrder($this)
                    ->count($con);
            }
        } else {
            return count($this->collTransactions);
        }
    }

    /**
     * Method called to associate a Transaction object to this object
     * through the Transaction foreign key attribute.
     *
     * @param    Transaction $l Transaction
     * @return   Order The current object (for fluent API support)
     */
    public function addTransaction(Transaction $l)
    {
        if ($this->collTransactions === null) {
            $this->initTransactions();
        }
        if (!$this->collTransactions->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddTransaction($l);
        }

        return $this;
    }

    /**
     * @param	Transaction $transaction The transaction object to add.
     */
    protected function doAddTransaction($transaction)
    {
        $this->collTransactions[]= $transaction;
        $transaction->setOrder($this);
    }

    /**
     * @param	Transaction $transaction The transaction object to remove.
     */
    public function removeTransaction($transaction)
    {
        if ($this->getTransactions()->contains($transaction)) {
            $this->collTransactions->remove($this->collTransactions->search($transaction));
            if (null === $this->transactionsScheduledForDeletion) {
                $this->transactionsScheduledForDeletion = clone $this->collTransactions;
                $this->transactionsScheduledForDeletion->clear();
            }
            $this->transactionsScheduledForDeletion[]= $transaction;
            $transaction->setOrder(null);
        }
    }

    /**
     * Clears out the collOrderExtraPropertys collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addOrderExtraPropertys()
     */
    public function clearOrderExtraPropertys()
    {
        $this->collOrderExtraPropertys = null; // important to set this to NULL since that means it is uninitialized
    }

    /**
     * Initializes the collOrderExtraPropertys collection.
     *
     * By default this just sets the collOrderExtraPropertys collection to an empty array (like clearcollOrderExtraPropertys());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param      boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initOrderExtraPropertys($overrideExisting = true)
    {
        if (null !== $this->collOrderExtraPropertys && !$overrideExisting) {
            return;
        }
        $this->collOrderExtraPropertys = new PropelObjectCollection();
        $this->collOrderExtraPropertys->setModel('OrderExtraProperty');
    }

    /**
     * Gets an array of OrderExtraProperty objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Order is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @return PropelObjectCollection|OrderExtraProperty[] List of OrderExtraProperty objects
     * @throws PropelException
     */
    public function getOrderExtraPropertys($criteria = null, PropelPDO $con = null)
    {
        if (null === $this->collOrderExtraPropertys || null !== $criteria) {
            if ($this->isNew() && null === $this->collOrderExtraPropertys) {
                // return empty collection
                $this->initOrderExtraPropertys();
            } else {
                $collOrderExtraPropertys = OrderExtraPropertyQuery::create(null, $criteria)
                    ->filterByOrder($this)
                    ->find($con);
                if (null !== $criteria) {
                    return $collOrderExtraPropertys;
                }
                $this->collOrderExtraPropertys = $collOrderExtraPropertys;
            }
        }

        return $this->collOrderExtraPropertys;
    }

    /**
     * Sets a collection of OrderExtraProperty objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param      PropelCollection $orderExtraPropertys A Propel collection.
     * @param      PropelPDO $con Optional connection object
     */
    public function setOrderExtraPropertys(PropelCollection $orderExtraPropertys, PropelPDO $con = null)
    {
        $this->orderExtraPropertysScheduledForDeletion = $this->getOrderExtraPropertys(new Criteria(), $con)->diff($orderExtraPropertys);

        foreach ($this->orderExtraPropertysScheduledForDeletion as $orderExtraPropertyRemoved) {
            $orderExtraPropertyRemoved->setOrder(null);
        }

        $this->collOrderExtraPropertys = null;
        foreach ($orderExtraPropertys as $orderExtraProperty) {
            $this->addOrderExtraProperty($orderExtraProperty);
        }

        $this->collOrderExtraPropertys = $orderExtraPropertys;
    }

    /**
     * Returns the number of related OrderExtraProperty objects.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct
     * @param      PropelPDO $con
     * @return int             Count of related OrderExtraProperty objects.
     * @throws PropelException
     */
    public function countOrderExtraPropertys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        if (null === $this->collOrderExtraPropertys || null !== $criteria) {
            if ($this->isNew() && null === $this->collOrderExtraPropertys) {
                return 0;
            } else {
                $query = OrderExtraPropertyQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByOrder($this)
                    ->count($con);
            }
        } else {
            return count($this->collOrderExtraPropertys);
        }
    }

    /**
     * Method called to associate a OrderExtraProperty object to this object
     * through the OrderExtraProperty foreign key attribute.
     *
     * @param    OrderExtraProperty $l OrderExtraProperty
     * @return   Order The current object (for fluent API support)
     */
    public function addOrderExtraProperty(OrderExtraProperty $l)
    {
        if ($this->collOrderExtraPropertys === null) {
            $this->initOrderExtraPropertys();
        }
        if (!$this->collOrderExtraPropertys->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddOrderExtraProperty($l);
        }

        return $this;
    }

    /**
     * @param	OrderExtraProperty $orderExtraProperty The orderExtraProperty object to add.
     */
    protected function doAddOrderExtraProperty($orderExtraProperty)
    {
        $this->collOrderExtraPropertys[]= $orderExtraProperty;
        $orderExtraProperty->setOrder($this);
    }

    /**
     * @param	OrderExtraProperty $orderExtraProperty The orderExtraProperty object to remove.
     */
    public function removeOrderExtraProperty($orderExtraProperty)
    {
        if ($this->getOrderExtraPropertys()->contains($orderExtraProperty)) {
            $this->collOrderExtraPropertys->remove($this->collOrderExtraPropertys->search($orderExtraProperty));
            if (null === $this->orderExtraPropertysScheduledForDeletion) {
                $this->orderExtraPropertysScheduledForDeletion = clone $this->collOrderExtraPropertys;
                $this->orderExtraPropertysScheduledForDeletion->clear();
            }
            $this->orderExtraPropertysScheduledForDeletion[]= $orderExtraProperty;
            $orderExtraProperty->setOrder(null);
        }
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->reference = null;
        $this->amount = null;
        $this->hash = null;
        $this->user_id = null;
        $this->seller_psp_configuration_id = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param      boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collTransactions) {
                foreach ($this->collTransactions as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collOrderExtraPropertys) {
                foreach ($this->collOrderExtraPropertys as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collTransactions instanceof PropelCollection) {
            $this->collTransactions->clearIterator();
        }
        $this->collTransactions = null;
        if ($this->collOrderExtraPropertys instanceof PropelCollection) {
            $this->collOrderExtraPropertys->clearIterator();
        }
        $this->collOrderExtraPropertys = null;
        $this->aSellerPspConfiguration = null;
    }

    /**
     * Return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(OrderPeer::DEFAULT_STRING_FORMAT);
    }

	// timestampable behavior
	
	/**
	 * Mark the current object so that the update date doesn't get updated during next save
	 *
	 * @return     Order The current object (for fluent API support)
	 */
	public function keepUpdateDateUnchanged()
	{
	    $this->modifiedColumns[] = OrderPeer::UPDATED_AT;
	
	    return $this;
	}

	// extra_properties behavior
	/**
	 * convert propertyname in method to property name
	 *
	 * @param String $name the camelized property name
	 *
	 * @return String
	 */
	protected function extraPropertyNameFromMethod($name)
	{
	  $tmp = $name;
	  $tmp = str_replace('::', '/', $tmp);
	  $tmp = preg_replace(array('/([A-Z]+)([A-Z][a-z])/', '/([a-z\d])([A-Z])/'),
	                      array('\1_\2', '\1_\2'), $tmp);
	  return strtolower($tmp);
	}
	
	/**
	 * checks that the event defines a property with $propertyName
	 *
	 * @todo optimize to make it stop on first occurence
	 *
	 * @param String    $propertyName  name of the property to check.
	 * @param PropelPDO $con           Optional connection object
	 *
	 * @return Boolean
	 */
	public function hasProperty($propertyName, PropelPDO $con = null)
	{
	  return $this->countPropertiesByName($propertyName, $con) > 0;
	}
	
	/**
	 * Count the number of occurences of $propertyName.
	 *
	 * @param   String    $propertyName   the property to count.
	 * @param   PropelPDO $con            Optional connection object
	 *
	 * @return  Integer
	 */
	public function countPropertiesByName($propertyName, PropelPDO $con = null)
	{
	  $count = 0;
	  $properties = $this->getOrderExtraPropertys(null, $con);
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  foreach($properties as $prop)
	  {
	    if($prop->getPropertyName() == $propertyName)
	    {
	      $count++;
	    }
	  }
	  return $count;
	}
	
	/**
	 * Set the property with id $id.
	 * can only be used with an already set property
	 *
	 * @param   PropelPDO $con Optional connection object
	 *
	 * @return Order|false
	 */
	protected function setPropertyById($id, $value, PropelPDO $con = null)
	{
	  $prop = $this->getPropertyObjectById($id, $con);
	  if($prop instanceof OrderExtraProperty)
	  {
	    $prop->setPropertyValue(OrderPeer::normalizeExtraPropertyValue($value));
	    return $this;
	  }
	  else
	  {
	    return false;
	  }
	}
	
	/**
	 * Retrive property objects with $propertyName.
	 *
	 * @param   String    $propertyName the properties to look for.
	 * @param   PropelPDO $con          Optional connection object
	 *
	 * @return  Array
	 */
	protected function getPropertiesObjectsByName($propertyName, PropelPDO $con = null)
	{
	  $ret = array();
	  $properties = $this->getOrderExtraPropertys(null, $con);
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  foreach($properties as $prop)
	  {
	    if($prop->getPropertyName() == $propertyName)
	    {
	      $ret[$prop->getId() ? $prop->getId() : $propertyName.'_'.count($ret)] = $prop;
	    }
	  }
	  return $ret;
	}
	
	/**
	 * Retrieve related property with $id.
	 * If property is not saved yet, id is the list index, created this way :
	 * $propertyName.'_'.$index.
	 *
	 * @param Integer|String  $id   the id of prorty to retrieve.
	 * @param PropelPDO       $con  Optional connection object
	 *
	 * @return OrderExtraProperty
	 */
	protected function getPropertyObjectById($id, PropelPDO $con = null)
	{
	  if(is_numeric($id))
	  {
	    $properties = $this->getOrderExtraPropertys(null, $con);
	    foreach($properties as $prop)
	    {
	      if($prop->getId() == $id)
	      {
	        return $prop;
	      }
	    }
	  }
	  else
	  {
	    $propertyName = substr($id, 0, strrpos($id, '_'));
	    $properties = $this->getPropertiesObjectsByName($propertyName, $con);
	    return $properties[$id];
	  }
	}
	
	/**
	 * Check wether property with $id is
	 *
	 * @param PropelPDO $con  Optional connection object
	 */
	protected function isPropertyWithIdA($id, $propertyName, PropelPDO $con = null)
	{
	  $prop = $this->getPropertyObjectById($id, $con);
	  return $prop && $prop->getPropertyName() == OrderPeer::normalizeExtraPropertyName($propertyName);
	}
	
	/**
	 * wrapped function on update{Property} callback
	 *
	 * @param string          $name  the property to update's type
	 * @param mixed           $value the new value
	 * @param integer|string  $id    the id of the property to update
	 * @param PropelPDO       $con   Optional connection object
	 *
	 * @return Boolean|OrderExtraProperty
	 */
	protected function setPropertyByNameAndId($name, $value, $id, PropelPDO $con = null)
	{
	  if($this->isPropertyWithIdA($id, OrderPeer::normalizeExtraPropertyName($name), $con))
	  {
	    return $this->setPropertyById($id, $value);
	  }
	  return false;
	}
	
	/**
	 * get the property with id $id.
	 * can only be used with an already set property
	 *
	 * @param PropelPDO $con Optional connection object
	 */
	protected function getPropertyById($id, $defaultValue = null, PropelPDO $con = null)
	{
	  $prop = $this->getPropertyObjectById($id, $con);
	  if($prop instanceof OrderExtraProperty)
	  {
	    return $prop->getPropertyValue();
	  }
	  else
	  {
	    return $defaultValue;
	  }
	}
	
	/**
	 * wrapped function on deleteProperty callback
	 *
	 * @param PropelPDO $con Optional connection object
	 */
	protected function deletePropertyByNameAndId($name, $id, PropelPDO $con = null)
	{
	  if($this->isPropertyWithIdA($id, OrderPeer::normalizeExtraPropertyName($name), $con))
	  {
	    return $this->deletePropertyById($id, $con);
	  }
	  return false;
	}
	
	/**
	 * delete a multiple occurence property
	 *
	 * @param PropelPDO $con  Optional connection object
	 */
	protected function deletePropertyById($id, PropelPDO $con = null)
	{
	  $prop = $this->getPropertyObjectById($id, $con);
	  if($prop instanceof OrderExtraProperty)
	  {
	    if(!$prop->isNew())
	    {
	      $prop->delete($con);
	    }
	    $this->collOrderExtraPropertys->remove($this->collOrderExtraPropertys->search($prop));
	    return $prop;
	  }
	  else
	  {
	    return false;
	  }
	}
	
	/**
	 * delete all properties with $name
	 *
	 * @param PropelPDO $con Optional connection object
	 */
	public function deletePropertiesByName($name, PropelPDO $con = null)
	{
	  $props = $this->getPropertiesObjectsByName($name, $con);
	  foreach($props as $prop)
	  {
	    if($prop instanceof OrderExtraProperty)
	    {
	      $prop->delete($con);
	      $this->collOrderExtraPropertys->remove($this->collOrderExtraPropertys->search($prop));
	    }
	  }
	  return $props;
	}
/**
 * Initializes internal state of Order object.
 */
public function __construct()
{
  parent::__construct();

  $this->initializeProperties();
}

/**
	 * initialize properties.
	 * called in the constructor to add default properties.
	 */
	protected function initializeProperties()
	{
	}/**
	 * Returns the list of registered extra properties
	 * that can be set only once.
	 *
	 * @return array
	 */
	public function getRegisteredSingleProperties()
	{
	  return array_keys($this->extraProperties);
	}
	
	/**
	 * Register a new single occurence property $propertyName for the object.
	 * The property will be accessible through getPropertyName method.
	 *
	 * @param String  $propertyName   the property name.
	 * @param Mixed   $defaultValue   default property value.
	 *
	 * @return Order
	 */
	public function registerProperty($propertyName, $defaultValue = null)
	{
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  /* comment this line to remove default value update ability
	  if(!array_key_exists($propertyName, $this->extraProperties))
	  {
	    $this->extraProperties[$propertyName] = $defaultValue;
	  }
	  /*/
	  $this->extraProperties[$propertyName] = $defaultValue;
	  //*/
	  return $this;
	}
	
	/**
	 * Set a single occurence property.
	 * If the property already exists, then it is ovverriden, ortherwise
	 * new property is created.
	 *
	 * @param String    $name   the property name.
	 * @param Mixed     $value  default property value.
	 * @param PropelPDO $con    Optional connection object
	 *
	 * @return Order
	 */
	public function setProperty($name, $value, PropelPDO $con = null)
	{
	  $name = OrderPeer::normalizeExtraPropertyName($name);
	  if($this->hasProperty($name, $con))
	  {
	    $properties = $this->getOrderExtraPropertys(null, $con);
	    foreach($properties as $prop)
	    {
	      if($prop->getPropertyName() == $name)
	      {
	        $prop->setPropertyValue(OrderPeer::normalizeExtraPropertyValue($value));
	        return $this;
	      }
	    }
	  }
	  else
	  {
	    $property = new OrderExtraProperty();
	    $property->setPropertyName($name);
	    $property->setPropertyValue(OrderPeer::normalizeExtraPropertyValue($value));
	    $this->addOrderExtraProperty($property);
	  }
	  return $this;
	}
	
	/**
	 * Get the value of an extra property that can appear only once.
	 *
	 * @param   String    $propertyName   the name of propertyto retrieve.
	 * @param   Mixed     $defaultValue   default value if property isn't set.
	 * @param   PropelPDO $con            Optional connection object
	 *
	 * @return  Mixed
	 */
	public function getProperty($propertyName, $defaultValue = null, PropelPDO $con = null)
	{
	  $properties = $this->getOrderExtraPropertys(null, $con);
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  foreach($properties as $prop)
	  {
	    if($prop->getPropertyName() == $propertyName)
	    {
	      return $prop->getPropertyValue();
	    }
	  }
	  return is_null($defaultValue)
	            ? isset($this->extraProperties[$propertyName])
	                      ? $this->extraProperties[$propertyName]
	                      : null
	            : $defaultValue;
	}/**
	 * returns the list of registered multiple properties
	 *
	 * @return array
	 */
	public function getRegisteredMultipleProperties()
	{
	  return array_keys($this->multipleExtraProperties);
	}
	
	/**
	 * Register a new multiple occurence property $propertyName for the object.
	 * The properties will be accessible through getPropertyNames method.
	 *
	 * @param String  $propertyName   the property name.
	 * @param Mixed   $defaultValue   default property value.
	 * @return Order
	 */
	public function registerMultipleProperty($propertyName, $defaultValue = null)
	{
	  $propertyName = OrderPeer::normalizeExtraPropertyName($propertyName);
	  /* comment this line to remove default value update ability
	  if(!array_key_exists($propertyName, $this->multipleExtraProperties))
	  {
	    $this->multipleExtraProperties[$propertyName] = $defaultValue;
	  }
	  /*/
	  $this->multipleExtraProperties[$propertyName] = $defaultValue;
	  //*/
	  return $this;
	}
	
	/**
	 * adds a multiple instance property to event
	 *
	 * @param String  $propertyName   the name of the property to add.
	 * @param Mixed   $value          the value for new property.
	 */
	public function addProperty($propertyName, $value)
	{
	  $property = new OrderExtraProperty();
	  $property->setPropertyName(OrderPeer::normalizeExtraPropertyName($propertyName));
	  $property->setPropertyValue(OrderPeer::normalizeExtraPropertyValue($value));
	  $this->addOrderExtraProperty($property);
	  return $this;
	}
	
	/**
	 * returns an array of all matching values for given property
	 * the array keys are the values ID
	 * @todo enhance the case an id is given
	 * @todo check the case there is an id but does not exists
	 *
	 * @param string    $propertyName    the name of properties to retrieve
	 * @param mixed     $default         The default value to use
	 * @param Integer   $id              The unique id of the property to retrieve
	 * @param PropelPDO $con             Optional connection object
	 *
	 * @return array  the list of matching properties (prop_id => value).
	 */
	public function getPropertiesByName($propertyName, $default = array(), $id = null, PropelPDO $con = null)
	{
	  $ret = array();
	  $properties = $this->getPropertiesObjectsByName($propertyName, $con);
	  foreach($properties as $key => $prop)
	  {
	    $ret[$key] = $prop->getPropertyValue();
	  }
	  // is there a property id ?
	  if (!is_null($id) && isset($ret[$id]))
	  {
	    return $ret[$id];
	  }
	  // no results ?
	  if(!count($ret))
	  {
	    return $default;
	  }
	  return $ret;
	}
	/**
	 * returns an associative array with the properties and associated values.
	 *
	 * @return array
	 */
	public function getExtraProperties($con = null)
	{
	  $ret = array();
	
	  // init with default single and multiple properties
	  $ret = array_merge($ret, $this->extraProperties);
	  foreach ($this->multipleExtraProperties as $propertyName => $default) {
	    $ret[$propertyName] = array();
	  }
	
	  foreach ($this->getOrderExtraPropertys(null, $con) as $property) {
	    $pname = $property->getPropertyName();
	    $pvalue = $property->getPropertyValue();
	
	    if (array_key_exists($pname, $this->extraProperties)) {
	      // single property
	      $ret[$pname] = $pvalue;
	    }
	    elseif (array_key_exists($pname, $ret) && is_array($ret[$pname])){
	      $ret[$pname][] = $pvalue;
	    }
	    elseif (array_key_exists($pname, $ret)){
	      $ret[$pname] = array($ret[$pname], $pvalue);
	    }
	    else {
	      $ret[$pname] = $pvalue;
	    }
	  }
	
	  // set multiple properties default
	  foreach ($this->multipleExtraProperties as $propertyName => $default) {
	    if (!is_null($default) && !count($ret[$propertyName])) {
	      $ret[$propertyName][] = $default;
	    }
	  }
	
	  return $ret;
	}
    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {
        
		// extra_properties behavior
		// calls the registered properties dedicated functions
		if(in_array($methodName = substr($name, 0,3), array('add', 'set', 'has', 'get')))
		{
		  $propertyName = OrderPeer::normalizeExtraPropertyName($this->extraPropertyNameFromMethod(substr($name, 3)));
		}
		else if(in_array($methodName = substr($name, 0,5), array('count', 'clear')))
		{
		  $propertyName = OrderPeer::normalizeExtraPropertyName($this->extraPropertyNameFromMethod(substr($name, 5)));
		}
		else if(in_array($methodName = substr($name, 0,6), array('delete', 'update')))
		{
		  $propertyName = OrderPeer::normalizeExtraPropertyName($this->extraPropertyNameFromMethod(substr($name, 6)));
		}
		if(isset($propertyName))
		{
		  if(array_key_exists($propertyName, $this->extraProperties))
		  {
		    switch($methodName)
		    {
		      case 'add':
		      case 'set':
		        $callable = array($this, 'setProperty');
		        break;
		      case 'get':
		        $callable = array($this, 'getProperty');
		        break;
		      case 'has':
		        $callable = array($this, 'hasProperty');
		        break;
		      case 'count':
		        $callable = array($this, 'countPropertiesByName');
		        break;
		      case 'clear':
		      case 'delete':
		        $callable = array($this, 'deletePropertiesByName');
		        break;
		      case 'update':
		        $callable = array($this, 'setPropertyByName');
		        break;
		    }
		  }
		  else if(array_key_exists($propertyName, $this->multipleExtraProperties) ||
		          ('S' == substr($propertyName, -1) && array_key_exists($propertyName = substr($propertyName, 0, -1), $this->multipleExtraProperties)))
		  {
		    switch($methodName)
		    {
		      case 'add':
		      case 'set':
		        $callable = array($this, 'addProperty');
		        break;
		      case 'get':
		        $callable = array($this, 'getPropertiesByName');
		        break;
		      case 'has':
		        $callable = array($this, 'hasProperty');
		        break;
		      case 'count':
		        $callable = array($this, 'countPropertiesByName');
		        break;
		      case 'clear':
		        $callable = array($this, 'deletePropertiesByName');
		        break;
		      case 'delete':
		        $callable = array($this, 'deletePropertyByNameAndId');
		        break;
		      case 'update':
		        $callable = array($this, 'setPropertyByNameAndId');
		        break;
		    }
		  }
		    //* no error throw to make sure other behaviors can be called.
		    else
		    {
		      throw new RuntimeException(sprintf('Unknown property %s.<br />possible single properties: %s<br />possible multiple properties', $propertyName, join(',', array_keys($this->extraProperties)), join(',', array_keys($this->multipleExtraProperties))));
		    }
		    //*/
		  if(isset($callable))
		  {
		    array_unshift($params, $propertyName);
		    return call_user_func_array($callable, $params);
		  }
		
		}

		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseOrder:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}


        return parent::__call($name, $params);
    }

} // BaseOrder
